[{"C:\\Users\\chrfe\\Desktop\\Informatik Projekte\\Website\\react\\chess-game\\src\\index.js":"1","C:\\Users\\chrfe\\Desktop\\Informatik Projekte\\Website\\react\\chess-game\\src\\chess.js":"2","C:\\Users\\chrfe\\Desktop\\Informatik Projekte\\Website\\react\\chess-game\\src\\chess_ai.js":"3"},{"size":22400,"mtime":1616072063163,"results":"4","hashOfConfig":"5"},{"size":44063,"mtime":1616072446552,"results":"6","hashOfConfig":"5"},{"size":6876,"mtime":1616066911210,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1umvizx",{"filePath":"11","messages":"12","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"16"},"C:\\Users\\chrfe\\Desktop\\Informatik Projekte\\Website\\react\\chess-game\\src\\index.js",["17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, Switch } from 'react-native';\nimport Board from \"./chess.js\";\nimport minimaxRoot from \"./chess_ai.js\";\nimport './index.css';\n\nlet WHITE = 0;\nlet BLACK = 8;\nlet PAWN = 0;\nlet KNIGHT = 1;\nlet BISHOP = 2;\nlet ROOK = 3;\nlet QUEEN = 4;\nlet KING = 5;\nlet EMPTY = -1;\n\nclass App extends React.Component {\n  constructor(props)\n  {\n    super(props);\n    var colors = [];\n    for(var i = 0;i<8;i++)\n    {\n      for(var j = 0;j<8;j++)\n      {\n        colors.push((i+j) % 2 === 0 ? \"white\" : \"black\");\n      }\n    }\n    \n    var pieceBackgroundColors = [];\n    for(i = 0;i<8;i++)\n    {\n      for(j = 0;j<8;j++)\n      {\n        pieceBackgroundColors.push(\"\");\n      }\n    }\n    \n    this.state = {\n      \"board\" : props.board,\n      \"selectedPiece\": false,\n      \"startingPiece\" : \"aa\",\n      \"squareColors\" : colors,\n      \"pieceBackgroundColors\" : pieceBackgroundColors,\n      \"whiteIsComputer\": false,\n      \"blackIsComputer\": false,\n    };\n    this.movePiece = this.movePiece.bind(this);\n    this.revertMove = this.revertMove.bind(this);\n    this.resetBoard = this.resetBoard.bind(this);\n  }\n  componentDidMount () {\n    window.addEventListener('keydown', this.revertMove)\n  }\n  componentWillUnmount () {\n    window.removeEventListener('keydown', this.revertMove)\n  }\n\n  componentDidUpdate()\n  {\n    console.log(\"Rendering done:\" + (performance.now()/1000));\n  }\n  \n  resetBoard()\n  {\n    this.state.board.reset();\n    this.calculateBackground();\n  }\n  \n  \n  computerMove()\n  {\n    if(!this.state.board.checkMate && !this.state.board.staleMate)\n    {\n      var [startY, startX, endY, endX, promotion] = minimaxRoot(3, this.state.board, true);\n      this.state.board.movePiece(startY,startX,endY,endX, promotion);  \n    }\n    this.calculateBackground();\n    if(this.state.board.checkMate === true)\n    {\n      alert(\"Checkmate!\");\n      console.log(this.state.board.current_color + \" lost!\");\n    }\n    else if(this.state.board.staleMate === true)\n    {\n      alert(\"Stalemate!\");\n      console.log(\"Draw!\");\n    }\n  }\n  movePiece(name)\n  {\n    console.log(\"Click performed:\" + (performance.now()/1000));\n    this.movePieceHuman(name);\n    if(this.state.board.checkMate === true)\n    {\n      alert(\"Checkmate!\");\n      console.log(this.state.board.current_color + \" lost!\");\n    }\n    else if(this.state.board.staleMate === true)\n    {\n      alert(\"Stalemate!\");\n      console.log(\"Draw!\");\n    }\n    if(this.state.board.current_color == BLACK && !this.state.board.checkMate && !this.state.board.staleMate)\n    {\n      this.computerMove();\n    }\n    \n  }\n  \n  movePieceHuman(name)\n  {\n    if(!this.state.board.isInReverse())\n    {\n      if(this.state.selectedPiece === true && !this.state.board.checkMate && !this.state.board.staleMate)\n      {\n        //Wenn Figur ausgew채hlt wurde\n        var startY = parseInt(this.state.startingPiece.slice(0,1));\n        var startX = parseInt(this.state.startingPiece.slice(1,2));\n        \n        var endY = parseInt(name.slice(0,1));\n        var endX = parseInt(name.slice(1,2));\n        if(this.state.board.isValidDestination(endY, endX))\n        { \n          //Bewegt die Figur\n          \n          var [isPossible, isCastling, isEnPassant, isPromotion] = this.state.board.movePiece(startY,startX,endY,endX, QUEEN);\n          \n          for(var i =0;i<this.state.pieceBackgroundColors.length;i++)\n          {\n            this.state.pieceBackgroundColors[i] = \"\";\n          }\n          if(isPromotion)\n          {\n            this.state.board.promotePiece(endX, (8-this.state.board.current_color), QUEEN);\n            this.state.board.calculateChecks();\n          }\n          this.setState({\"selectedPiece\": false});\n          this.calculateBackground();\n        }\n        else if(startX !== endX || startY !== endY){\n          //Es wurde eine eigene Figur als Ziel ausgew채hlt\n          for(i =0;i<this.state.pieceBackgroundColors.length;i++)\n          {\n            this.state.pieceBackgroundColors[i] = \"\";\n          }\n          this.state.squareColors[startY*8 + startX] = (startX+startY) % 2 === 0 ? \"white\" : \"black\";\n          this.state.pieceBackgroundColors[startY*8 + startX] = \"\";\n          \n          this.setState({\"selectedPiece\": true});\n          this.setState({\"startingPiece\":name});\n          this.state.squareColors[endY*8 + endX] = \"selected\";\n          var possibleMoves = this.state.board.getPossibleMoves(endX,endY);\n          for(i = 0; i<possibleMoves.length;i++)\n          {\n            this.state.pieceBackgroundColors[possibleMoves[i][0]*8 + possibleMoves[i][1]] += \" possible-position\";\n          }\n        }\n        else{\n          //Es wurde das gleiche Feld nochmal ausgew채hlt\n          for(i =0;i<this.state.pieceBackgroundColors.length;i++)\n          {\n            this.state.pieceBackgroundColors[i] =  this.state.pieceBackgroundColors[i] !== \" check\" ?  \"\": \" check\";\n          }\n          this.state.squareColors[startY*8 + startX] = (startX+startY) % 2 === 0 ? \"white\" : \"black\";\n          this.state.pieceBackgroundColors[startY*8 + startX] = this.state.pieceBackgroundColors[startY*8 + startX] !== \" check\" ?  \"\": \" check\";\n          this.setState({\"selectedPiece\": false});\n          this.setState({\"startingPiece\":\"aa\"});\n        }\n      }\n      else\n      {\n        //Es wird eine Figur ausgew채hlt\n        var targetY = parseInt(name.slice(0,1));\n        var targetX = parseInt(name.slice(1,2));\n        \n        if(this.state.board.board[targetY*8+targetX] !== EMPTY && this.state.board.board[targetY*8+targetX]>>>3 === this.state.board.current_color>>>3)\n        {\n          this.setState({\"selectedPiece\": true});\n          this.setState({\"startingPiece\":name});\n          this.state.squareColors[targetY*8 + targetX] = \"selected\";\n          possibleMoves = this.state.board.getPossibleMoves(targetX,targetY);\n          for(i = 0; i<possibleMoves.length;i++)\n          {\n            this.state.pieceBackgroundColors[possibleMoves[i][0]*8 + possibleMoves[i][1]] += \" possible-position\";\n          }\n        }\n      }\n    }\n  }\n  \n  calculateBackground()\n  {\n    var pieceBackgroundTemp = []\n    for(var i = 0; i<64;i++)\n    {\n      pieceBackgroundTemp.push(\"\");\n    }\n    if(this.state.board.isWhiteCheck)\n    {\n      var [kingX,kingY] = this.state.board.getKingPosition(0, this.state.board.board);\n      pieceBackgroundTemp[kingY*8 + kingX] = \" check\";\n      \n    }\n    if(this.state.board.isBlackCheck)\n    {\n      [kingX,kingY] = this.state.board.getKingPosition(1, this.state.board.board);\n      pieceBackgroundTemp[kingY*8 + kingX] = \" check\";\n    }\n    \n    var squareColorTemp = [];\n    for(i = 0;i < 8 ;i++)\n    {\n      for (var j = 0; j<8;j++)\n      {\n        squareColorTemp.push((i+j) % 2 === 0 ? \"white\" : \"black\");\n      }\n    }\n    this.setState({\"squareColors\": squareColorTemp});\n    this.setState({\"selectedPiece\": false});\n    this.setState({\"startingPiece\":\"aa\"});\n    this.setState({\"pieceBackgroundColors\": pieceBackgroundTemp});\n  }\n  \n  revertMove(event)\n  {\n    \n    if(event.keyCode === 37)\n    {\n      this.state.board.goBackInHistory();\n      this.setState({\"selectedPiece\": false});\n      this.calculateBackground();\n    }\n    else if(event.keyCode === 39)\n    {\n      this.state.board.goForwardInHistory();\n      this.setState({\"selectedPiece\": false});\n      this.calculateBackground();\n    }\n    \n  }\n  \n  \n  \n  render()\n  {\n    let pieceDictionary = [null, \"pawn_white\", \"knight_white\", \"bishop_white\", \"rook_white\", \"queen_white\", \"king_white\", null, null, \"pawn_black\", \"knight_black\", \"bishop_black\",\"rook_black\", \"queen_black\", \"king_black\"]\n    return <div className=\"center-screen\">\n    <div className=\"row\">\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"00\" name=\"00\"pieceColor={this.state.pieceBackgroundColors[0]} color={this.state.squareColors[0]} piece = {pieceDictionary[this.state.board.board[0]+1]}/>\n    <Square onPress={this.movePiece} id=\"01\" name=\"01\"pieceColor={this.state.pieceBackgroundColors[1]} color={this.state.squareColors[1]} piece = {pieceDictionary[this.state.board.board[1]+1]}/>\n    <Square onPress={this.movePiece} id=\"02\" name=\"02\"pieceColor={this.state.pieceBackgroundColors[2]} color={this.state.squareColors[2]} piece = {pieceDictionary[this.state.board.board[2]+1]}/>\n    <Square onPress={this.movePiece} id=\"03\" name=\"03\"pieceColor={this.state.pieceBackgroundColors[3]} color={this.state.squareColors[3]} piece = {pieceDictionary[this.state.board.board[3]+1]}/>\n    <Square onPress={this.movePiece} id=\"04\" name=\"04\"pieceColor={this.state.pieceBackgroundColors[4]} color={this.state.squareColors[4]} piece = {pieceDictionary[this.state.board.board[4]+1]}/>\n    <Square onPress={this.movePiece} id=\"05\" name=\"05\"pieceColor={this.state.pieceBackgroundColors[5]} color={this.state.squareColors[5]} piece = {pieceDictionary[this.state.board.board[5]+1]}/>\n    <Square onPress={this.movePiece} id=\"06\" name=\"06\"pieceColor={this.state.pieceBackgroundColors[6]} color={this.state.squareColors[6]} piece = {pieceDictionary[this.state.board.board[6]+1]}/>\n    <Square onPress={this.movePiece} id=\"07\" name=\"07\"pieceColor={this.state.pieceBackgroundColors[7]} color={this.state.squareColors[7]} piece = {pieceDictionary[this.state.board.board[7]+1]}/>\n    </div>\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"10\" name=\"10\"pieceColor={this.state.pieceBackgroundColors[8]} color={this.state.squareColors[8]} piece = {pieceDictionary[this.state.board.board[8]+1]}/>\n    <Square onPress={this.movePiece} id=\"11\" name=\"11\"pieceColor={this.state.pieceBackgroundColors[9]} color={this.state.squareColors[9]} piece = {pieceDictionary[this.state.board.board[9]+1]}/>\n    <Square onPress={this.movePiece} id=\"12\" name=\"12\"pieceColor={this.state.pieceBackgroundColors[10]} color={this.state.squareColors[10]} piece = {pieceDictionary[this.state.board.board[10]+1]}/>\n    <Square onPress={this.movePiece} id=\"13\" name=\"13\"pieceColor={this.state.pieceBackgroundColors[11]} color={this.state.squareColors[11]} piece = {pieceDictionary[this.state.board.board[11]+1]}/>\n    <Square onPress={this.movePiece} id=\"14\" name=\"14\"pieceColor={this.state.pieceBackgroundColors[12]} color={this.state.squareColors[12]} piece = {pieceDictionary[this.state.board.board[12]+1]}/>\n    <Square onPress={this.movePiece} id=\"15\" name=\"15\"pieceColor={this.state.pieceBackgroundColors[13]} color={this.state.squareColors[13]} piece = {pieceDictionary[this.state.board.board[13]+1]}/>\n    <Square onPress={this.movePiece} id=\"16\" name=\"16\"pieceColor={this.state.pieceBackgroundColors[14]} color={this.state.squareColors[14]} piece = {pieceDictionary[this.state.board.board[14]+1]}/>\n    <Square onPress={this.movePiece} id=\"17\" name=\"17\"pieceColor={this.state.pieceBackgroundColors[15]} color={this.state.squareColors[15]} piece = {pieceDictionary[this.state.board.board[15]+1]}/>\n    </div>\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"20\" name=\"20\"pieceColor={this.state.pieceBackgroundColors[16]} color={this.state.squareColors[16]} piece = {pieceDictionary[this.state.board.board[16]+1]}/>\n    <Square onPress={this.movePiece} id=\"21\" name=\"21\"pieceColor={this.state.pieceBackgroundColors[17]} color={this.state.squareColors[17]} piece = {pieceDictionary[this.state.board.board[17]+1]}/>\n    <Square onPress={this.movePiece} id=\"22\" name=\"22\"pieceColor={this.state.pieceBackgroundColors[18]} color={this.state.squareColors[18]} piece = {pieceDictionary[this.state.board.board[18]+1]}/>\n    <Square onPress={this.movePiece} id=\"23\" name=\"23\"pieceColor={this.state.pieceBackgroundColors[19]} color={this.state.squareColors[19]} piece = {pieceDictionary[this.state.board.board[19]+1]}/>\n    <Square onPress={this.movePiece} id=\"24\" name=\"24\"pieceColor={this.state.pieceBackgroundColors[20]} color={this.state.squareColors[20]} piece = {pieceDictionary[this.state.board.board[20]+1]}/>\n    <Square onPress={this.movePiece} id=\"25\" name=\"25\"pieceColor={this.state.pieceBackgroundColors[21]} color={this.state.squareColors[21]} piece = {pieceDictionary[this.state.board.board[21]+1]}/>\n    <Square onPress={this.movePiece} id=\"26\" name=\"26\"pieceColor={this.state.pieceBackgroundColors[22]} color={this.state.squareColors[22]} piece = {pieceDictionary[this.state.board.board[22]+1]}/>\n    <Square onPress={this.movePiece} id=\"27\" name=\"27\"pieceColor={this.state.pieceBackgroundColors[23]} color={this.state.squareColors[23]} piece = {pieceDictionary[this.state.board.board[23]+1]}/>\n    </div>\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"30\" name=\"30\"pieceColor={this.state.pieceBackgroundColors[24]} color={this.state.squareColors[24]} piece = {pieceDictionary[this.state.board.board[24]+1]}/>\n    <Square onPress={this.movePiece} id=\"31\" name=\"31\"pieceColor={this.state.pieceBackgroundColors[25]} color={this.state.squareColors[25]} piece = {pieceDictionary[this.state.board.board[25]+1]}/>\n    <Square onPress={this.movePiece} id=\"32\" name=\"32\"pieceColor={this.state.pieceBackgroundColors[26]} color={this.state.squareColors[26]} piece = {pieceDictionary[this.state.board.board[26]+1]}/>\n    <Square onPress={this.movePiece} id=\"33\" name=\"33\"pieceColor={this.state.pieceBackgroundColors[27]} color={this.state.squareColors[27]} piece = {pieceDictionary[this.state.board.board[27]+1]}/>\n    <Square onPress={this.movePiece} id=\"34\" name=\"34\"pieceColor={this.state.pieceBackgroundColors[28]} color={this.state.squareColors[28]} piece = {pieceDictionary[this.state.board.board[28]+1]}/>\n    <Square onPress={this.movePiece} id=\"35\" name=\"35\"pieceColor={this.state.pieceBackgroundColors[29]} color={this.state.squareColors[29]} piece = {pieceDictionary[this.state.board.board[29]+1]}/>\n    <Square onPress={this.movePiece} id=\"36\" name=\"36\"pieceColor={this.state.pieceBackgroundColors[30]} color={this.state.squareColors[30]} piece = {pieceDictionary[this.state.board.board[30]+1]}/>\n    <Square onPress={this.movePiece} id=\"37\" name=\"37\"pieceColor={this.state.pieceBackgroundColors[31]} color={this.state.squareColors[31]} piece = {pieceDictionary[this.state.board.board[31]+1]}/>\n    </div>\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"40\" name=\"40\"pieceColor={this.state.pieceBackgroundColors[32]} color={this.state.squareColors[32]} piece = {pieceDictionary[this.state.board.board[32]+1]}/>\n    <Square onPress={this.movePiece} id=\"41\" name=\"41\"pieceColor={this.state.pieceBackgroundColors[33]} color={this.state.squareColors[33]} piece = {pieceDictionary[this.state.board.board[33]+1]}/>\n    <Square onPress={this.movePiece} id=\"42\" name=\"42\"pieceColor={this.state.pieceBackgroundColors[34]} color={this.state.squareColors[34]} piece = {pieceDictionary[this.state.board.board[34]+1]}/>\n    <Square onPress={this.movePiece} id=\"43\" name=\"43\"pieceColor={this.state.pieceBackgroundColors[35]} color={this.state.squareColors[35]} piece = {pieceDictionary[this.state.board.board[35]+1]}/>\n    <Square onPress={this.movePiece} id=\"44\" name=\"44\"pieceColor={this.state.pieceBackgroundColors[36]} color={this.state.squareColors[36]} piece = {pieceDictionary[this.state.board.board[36]+1]}/>\n    <Square onPress={this.movePiece} id=\"45\" name=\"45\"pieceColor={this.state.pieceBackgroundColors[37]} color={this.state.squareColors[37]} piece = {pieceDictionary[this.state.board.board[37]+1]}/>\n    <Square onPress={this.movePiece} id=\"46\" name=\"46\"pieceColor={this.state.pieceBackgroundColors[38]} color={this.state.squareColors[38]} piece = {pieceDictionary[this.state.board.board[38]+1]}/>\n    <Square onPress={this.movePiece} id=\"47\" name=\"47\"pieceColor={this.state.pieceBackgroundColors[39]} color={this.state.squareColors[39]} piece = {pieceDictionary[this.state.board.board[39]+1]}/>\n    </div>\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"50\" name=\"50\"pieceColor={this.state.pieceBackgroundColors[40]} color={this.state.squareColors[40]} piece = {pieceDictionary[this.state.board.board[40]+1]}/>\n    <Square onPress={this.movePiece} id=\"51\" name=\"51\"pieceColor={this.state.pieceBackgroundColors[41]} color={this.state.squareColors[41]} piece = {pieceDictionary[this.state.board.board[41]+1]}/>\n    <Square onPress={this.movePiece} id=\"52\" name=\"52\"pieceColor={this.state.pieceBackgroundColors[42]} color={this.state.squareColors[42]} piece = {pieceDictionary[this.state.board.board[42]+1]}/>\n    <Square onPress={this.movePiece} id=\"53\" name=\"53\"pieceColor={this.state.pieceBackgroundColors[43]} color={this.state.squareColors[43]} piece = {pieceDictionary[this.state.board.board[43]+1]}/>\n    <Square onPress={this.movePiece} id=\"54\" name=\"54\"pieceColor={this.state.pieceBackgroundColors[44]} color={this.state.squareColors[44]} piece = {pieceDictionary[this.state.board.board[44]+1]}/>\n    <Square onPress={this.movePiece} id=\"55\" name=\"55\"pieceColor={this.state.pieceBackgroundColors[45]} color={this.state.squareColors[45]} piece = {pieceDictionary[this.state.board.board[45]+1]}/>\n    <Square onPress={this.movePiece} id=\"56\" name=\"56\"pieceColor={this.state.pieceBackgroundColors[46]} color={this.state.squareColors[46]} piece = {pieceDictionary[this.state.board.board[46]+1]}/>\n    <Square onPress={this.movePiece} id=\"57\" name=\"57\"pieceColor={this.state.pieceBackgroundColors[47]} color={this.state.squareColors[47]} piece = {pieceDictionary[this.state.board.board[47]+1]}/>\n    </div>\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"60\" name=\"60\"pieceColor={this.state.pieceBackgroundColors[48]} color={this.state.squareColors[48]} piece = {pieceDictionary[this.state.board.board[48]+1]}/>\n    <Square onPress={this.movePiece} id=\"61\" name=\"61\"pieceColor={this.state.pieceBackgroundColors[49]} color={this.state.squareColors[49]} piece = {pieceDictionary[this.state.board.board[49]+1]}/>\n    <Square onPress={this.movePiece} id=\"62\" name=\"62\"pieceColor={this.state.pieceBackgroundColors[50]} color={this.state.squareColors[50]} piece = {pieceDictionary[this.state.board.board[50]+1]}/>\n    <Square onPress={this.movePiece} id=\"63\" name=\"63\"pieceColor={this.state.pieceBackgroundColors[51]} color={this.state.squareColors[51]} piece = {pieceDictionary[this.state.board.board[51]+1]}/>\n    <Square onPress={this.movePiece} id=\"64\" name=\"64\"pieceColor={this.state.pieceBackgroundColors[52]} color={this.state.squareColors[52]} piece = {pieceDictionary[this.state.board.board[52]+1]}/>\n    <Square onPress={this.movePiece} id=\"65\" name=\"65\"pieceColor={this.state.pieceBackgroundColors[53]} color={this.state.squareColors[53]} piece = {pieceDictionary[this.state.board.board[53]+1]}/>\n    <Square onPress={this.movePiece} id=\"66\" name=\"66\"pieceColor={this.state.pieceBackgroundColors[54]} color={this.state.squareColors[54]} piece = {pieceDictionary[this.state.board.board[54]+1]}/>\n    <Square onPress={this.movePiece} id=\"67\" name=\"67\"pieceColor={this.state.pieceBackgroundColors[55]} color={this.state.squareColors[55]} piece = {pieceDictionary[this.state.board.board[55]+1]}/>\n    </div>\n    <div className=\"row\">\n    <Square onPress={this.movePiece} id=\"70\" name=\"70\"pieceColor={this.state.pieceBackgroundColors[56]} color={this.state.squareColors[56]} piece = {pieceDictionary[this.state.board.board[56]+1]}/>\n    <Square onPress={this.movePiece} id=\"71\" name=\"71\"pieceColor={this.state.pieceBackgroundColors[57]} color={this.state.squareColors[57]} piece = {pieceDictionary[this.state.board.board[57]+1]}/>\n    <Square onPress={this.movePiece} id=\"72\" name=\"72\"pieceColor={this.state.pieceBackgroundColors[58]} color={this.state.squareColors[58]} piece = {pieceDictionary[this.state.board.board[58]+1]}/>\n    <Square onPress={this.movePiece} id=\"73\" name=\"73\"pieceColor={this.state.pieceBackgroundColors[59]} color={this.state.squareColors[59]} piece = {pieceDictionary[this.state.board.board[59]+1]}/>\n    <Square onPress={this.movePiece} id=\"74\" name=\"74\"pieceColor={this.state.pieceBackgroundColors[60]} color={this.state.squareColors[60]} piece = {pieceDictionary[this.state.board.board[60]+1]}/>\n    <Square onPress={this.movePiece} id=\"75\" name=\"75\"pieceColor={this.state.pieceBackgroundColors[61]} color={this.state.squareColors[61]} piece = {pieceDictionary[this.state.board.board[61]+1]}/>\n    <Square onPress={this.movePiece} id=\"76\" name=\"76\"pieceColor={this.state.pieceBackgroundColors[62]} color={this.state.squareColors[62]} piece = {pieceDictionary[this.state.board.board[62]+1]}/>\n    <Square onPress={this.movePiece} id=\"77\" name=\"77\"pieceColor={this.state.pieceBackgroundColors[63]} color={this.state.squareColors[63]} piece = {pieceDictionary[this.state.board.board[63]+1]}/>\n    </div>\n    <div className= \"reset-button\">\n    <Button color=\"#f00\" title = \"Reset\" onPress={this.resetBoard}/>\n    </div>\n    </div>\n    </div>\n  }\n  \n}\n\nclass Square extends React.Component{\n  constructor(props)\n  {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    var usedWidth = window.innerWidth > window.screen.width ? window.screen.width : window.innerWidth\n    var width = String(Math.min(100, usedWidth*0.06))+\"px\";\n    this.state = \n    {\n      imageWidth: width,\n    }\n  }\n  \n  handleClick(event)\n  {\n    \n    this.props.onPress(this.props.name);\n  }\n  updateDimensions = () => {\n    var usedWidth = window.innerWidth > window.screen.width ? window.screen.width : window.innerWidth\n    this.setState({ imageWidth: String(Math.min(100, usedWidth*0.06))+\"px\"});\n  };\n  componentDidMount() {\n    window.addEventListener('resize', this.updateDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n  \n  render(){\n    \n    if(this.props.piece == null)\n    {\n      return <div onClick = {this.handleClick}  style={{width: this.state.imageWidth , height: this.state.imageWidth}} className={this.props.color}>\n      <div className={this.props.pieceColor}></div>\n      </div>\n    }\n    var pieceClass = \"piece \" + this.props.pieceColor;\n    return <div  onClick = {this.handleClick} style={{width: this.state.imageWidth, height: this.state.imageWidth}} className={this.props.color}>\n    <img alt={this.props.piece} className={pieceClass} src= {require('../public/pieces/'+this.props.piece+\".png\").default} />\n    </div>\n  }\n}\n\nvar board = new Board();\n\nReactDOM.render(\n  <React.StrictMode>\n  <App board = {board}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n  );\n  ","C:\\Users\\chrfe\\Desktop\\Informatik Projekte\\Website\\react\\chess-game\\src\\chess.js",["39","40","41","42","43","44","45","46","47","48","49","50","51"],"C:\\Users\\chrfe\\Desktop\\Informatik Projekte\\Website\\react\\chess-game\\src\\chess_ai.js",["52","53","54"],"let EMPTY = -1;\r\nlet PAWN = 0;\r\nlet KNIGHT = 1;\r\nlet BISHOP = 2;\r\nlet ROOK = 3;\r\nlet QUEEN = 4;\r\nlet KING = 5;\r\nvar numberOfMoves = 0;\r\nvar minimaxRoot =function(depth, game, isMaximisingPlayer) {\r\n    \r\n    var newGameMoves = game.ugly_moves();\r\n    var bestMove = -9999;\r\n    var bestMoveFound;\r\n    \r\n    \r\n    for(var i = 0; i < newGameMoves.length; i++) {\r\n        var newGameMove = newGameMoves[i]\r\n        var moveWasPlayed = game.ugly_move(newGameMove);\r\n        var value = minimax(depth - 1, game, -10000, 10000, !isMaximisingPlayer);\r\n        if(moveWasPlayed)\r\n        {\r\n            game.undo();\r\n        }\r\n        else{\r\n            game.printStatus(newGameMove);\r\n        }\r\n        if(value >= bestMove) {\r\n            bestMove = value;\r\n            bestMoveFound = newGameMove;\r\n        }\r\n    }\r\n    console.log(\"Evaluated: \"+ numberOfMoves);\r\n    numberOfMoves = 0\r\n    return bestMoveFound;\r\n};\r\n\r\nexport default minimaxRoot;\r\n\r\nvar minimax = function (depth, game, alpha, beta, isMaximisingPlayer) {\r\n    if (depth === 0) {\r\n        numberOfMoves++;\r\n        return -evaluateBoard(game.board);\r\n    }\r\n    \r\n    var newGameMoves = game.ugly_moves();\r\n    \r\n    if (isMaximisingPlayer) {\r\n        var bestMove = -9999;\r\n        for (var i = 0; i < newGameMoves.length; i++) {\r\n            var moveWasPlayed = game.ugly_move(newGameMoves[i]);\r\n            bestMove = Math.max(bestMove, minimax(depth - 1, game, alpha, beta, !isMaximisingPlayer));\r\n            if(moveWasPlayed)\r\n            {\r\n                game.undo();\r\n            }\r\n            else{\r\n                game.printStatus(newGameMoves[i]);\r\n            }\r\n            alpha = Math.max(alpha, bestMove);\r\n            if (beta <= alpha) {\r\n                return bestMove;\r\n            }\r\n        }\r\n        return bestMove;\r\n    } else {\r\n        var bestMove = 9999;\r\n        for (var i = 0; i < newGameMoves.length; i++) {\r\n            moveWasPlayed = game.ugly_move(newGameMoves[i]);\r\n            bestMove = Math.min(bestMove, minimax(depth - 1, game, alpha, beta, !isMaximisingPlayer));\r\n            if(moveWasPlayed)\r\n            {\r\n                game.undo();\r\n            }\r\n            else{\r\n                game.printStatus(newGameMoves[i]);\r\n            }\r\n            beta = Math.min(beta, bestMove);\r\n            if (beta <= alpha) {\r\n                return bestMove;\r\n            }\r\n        }\r\n        return bestMove;\r\n    }\r\n};\r\n\r\nvar evaluateBoard = function (board) {\r\n    var totalEvaluation = 0;\r\n    for (var i = 0; i < 8; i++) {\r\n        for (var j = 0; j < 8; j++) {\r\n            totalEvaluation = totalEvaluation + getPieceValue(board[i*8+j], i ,j);\r\n        }\r\n    }\r\n    return totalEvaluation;\r\n};\r\n\r\nvar reverseArray = function(array) {\r\n    return array.slice().reverse();\r\n};\r\n\r\nvar pawnEvalWhite =\r\n[\r\n    [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],\r\n    [5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0],\r\n    [1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0],\r\n    [0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5],\r\n    [0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0],\r\n    [0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5],\r\n    [0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5],\r\n    [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]\r\n];\r\n\r\nvar pawnEvalBlack = reverseArray(pawnEvalWhite);\r\n\r\nvar knightEval =\r\n[\r\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\r\n    [-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],\r\n    [-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],\r\n    [-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],\r\n    [-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],\r\n    [-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],\r\n    [-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],\r\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]\r\n];\r\n\r\nvar bishopEvalWhite = [\r\n    [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\r\n    [ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\r\n    [ -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],\r\n    [ -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],\r\n    [ -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],\r\n    [ -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0],\r\n    [ -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],\r\n    [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]\r\n];\r\n\r\nvar bishopEvalBlack = reverseArray(bishopEvalWhite);\r\n\r\nvar rookEvalWhite = [\r\n    [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],\r\n    [  0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5],\r\n    [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n    [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n    [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n    [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n    [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n    [  0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0]\r\n];\r\n\r\nvar rookEvalBlack = reverseArray(rookEvalWhite);\r\n\r\nvar evalQueen = [\r\n    [ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\r\n    [ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\r\n    [ -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\r\n    [ -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\r\n    [  0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\r\n    [ -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\r\n    [ -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0],\r\n    [ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]\r\n];\r\n\r\nvar kingEvalWhite = [\r\n    \r\n    [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n    [ -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\r\n    [ -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\r\n    [  2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0 ],\r\n    [  2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0 ]\r\n];\r\n\r\nvar kingEvalBlack = reverseArray(kingEvalWhite);\r\n\r\n\r\n\r\n\r\nvar getPieceValue = function (piece, y, x) {\r\n    if (piece === EMPTY) {\r\n        return 0;\r\n    }\r\n    var getAbsoluteValue = function (piece, isWhite, x ,y) {\r\n        if (piece%8 === PAWN) {\r\n            return 10 + ( isWhite ? pawnEvalWhite[y][x] : pawnEvalBlack[y][x] );\r\n        } else if (piece%8  === ROOK) {\r\n            return 50 + ( isWhite ? rookEvalWhite[y][x] : rookEvalBlack[y][x] );\r\n        } else if (piece%8  === KNIGHT) {\r\n            return 30 + knightEval[y][x];\r\n        } else if (piece%8  === BISHOP) {\r\n            return 30 + ( isWhite ? bishopEvalWhite[y][x] : bishopEvalBlack[y][x] );\r\n        } else if (piece%8  === QUEEN) {\r\n            return 90 + evalQueen[y][x];\r\n        } else if (piece%8  === KING) {\r\n            return 900 + ( isWhite ? kingEvalWhite[y][x] : kingEvalBlack[y][x] );\r\n        }\r\n        throw \"Unknown piece type: \" + piece%8 ;\r\n    };\r\n    \r\n    var absoluteValue = getAbsoluteValue(piece, piece < 8, x ,y);\r\n    return piece < 8 ? absoluteValue : -absoluteValue;\r\n};",["55","56"],{"ruleId":"57","severity":1,"message":"58","line":3,"column":18,"nodeType":"59","messageId":"60","endLine":3,"endColumn":24},{"ruleId":"57","severity":1,"message":"61","line":8,"column":5,"nodeType":"59","messageId":"60","endLine":8,"endColumn":10},{"ruleId":"57","severity":1,"message":"62","line":10,"column":5,"nodeType":"59","messageId":"60","endLine":10,"endColumn":9},{"ruleId":"57","severity":1,"message":"63","line":11,"column":5,"nodeType":"59","messageId":"60","endLine":11,"endColumn":11},{"ruleId":"57","severity":1,"message":"64","line":12,"column":5,"nodeType":"59","messageId":"60","endLine":12,"endColumn":11},{"ruleId":"57","severity":1,"message":"65","line":13,"column":5,"nodeType":"59","messageId":"60","endLine":13,"endColumn":9},{"ruleId":"57","severity":1,"message":"66","line":15,"column":5,"nodeType":"59","messageId":"60","endLine":15,"endColumn":9},{"ruleId":"67","severity":1,"message":"68","line":105,"column":39,"nodeType":"69","messageId":"70","endLine":105,"endColumn":41},{"ruleId":"57","severity":1,"message":"71","line":128,"column":16,"nodeType":"59","messageId":"60","endLine":128,"endColumn":26},{"ruleId":"57","severity":1,"message":"72","line":128,"column":28,"nodeType":"59","messageId":"60","endLine":128,"endColumn":38},{"ruleId":"57","severity":1,"message":"73","line":128,"column":40,"nodeType":"59","messageId":"60","endLine":128,"endColumn":51},{"ruleId":"74","severity":1,"message":"75","line":132,"column":13,"nodeType":"76","endLine":132,"endColumn":45},{"ruleId":"74","severity":1,"message":"75","line":146,"column":13,"nodeType":"76","endLine":146,"endColumn":45},{"ruleId":"74","severity":1,"message":"75","line":148,"column":11,"nodeType":"76","endLine":148,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":149,"column":11,"nodeType":"76","endLine":149,"endColumn":43},{"ruleId":"74","severity":1,"message":"75","line":153,"column":11,"nodeType":"76","endLine":153,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":157,"column":13,"nodeType":"76","endLine":157,"endColumn":45},{"ruleId":"74","severity":1,"message":"75","line":164,"column":13,"nodeType":"76","endLine":164,"endColumn":45},{"ruleId":"74","severity":1,"message":"75","line":166,"column":11,"nodeType":"76","endLine":166,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":167,"column":11,"nodeType":"76","endLine":167,"endColumn":43},{"ruleId":"74","severity":1,"message":"75","line":182,"column":11,"nodeType":"76","endLine":182,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":186,"column":13,"nodeType":"76","endLine":186,"endColumn":45},{"ruleId":"67","severity":1,"message":"68","line":82,"column":18,"nodeType":"69","messageId":"70","endLine":82,"endColumn":20},{"ruleId":"67","severity":1,"message":"77","line":103,"column":22,"nodeType":"69","messageId":"70","endLine":103,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":133,"column":21,"nodeType":"59","messageId":"80","endLine":133,"endColumn":22},{"ruleId":"78","severity":1,"message":"81","line":135,"column":25,"nodeType":"59","messageId":"80","endLine":135,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":155,"column":18,"nodeType":"69","messageId":"70","endLine":155,"endColumn":20},{"ruleId":"67","severity":1,"message":"77","line":166,"column":22,"nodeType":"69","messageId":"70","endLine":166,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":215,"column":17,"nodeType":"59","messageId":"80","endLine":215,"endColumn":18},{"ruleId":"78","severity":1,"message":"79","line":219,"column":17,"nodeType":"59","messageId":"80","endLine":219,"endColumn":18},{"ruleId":"78","severity":1,"message":"82","line":397,"column":18,"nodeType":"59","messageId":"80","endLine":397,"endColumn":28},{"ruleId":"83","severity":1,"message":"84","line":453,"column":56,"nodeType":"85","messageId":"86","endLine":453,"endColumn":118},{"ruleId":"57","severity":1,"message":"87","line":534,"column":50,"nodeType":"59","messageId":"60","endLine":534,"endColumn":61},{"ruleId":"67","severity":1,"message":"68","line":1123,"column":43,"nodeType":"69","messageId":"70","endLine":1123,"endColumn":45},{"ruleId":"67","severity":1,"message":"68","line":1123,"column":69,"nodeType":"69","messageId":"70","endLine":1123,"endColumn":71},{"ruleId":"78","severity":1,"message":"88","line":66,"column":13,"nodeType":"59","messageId":"80","endLine":66,"endColumn":21},{"ruleId":"78","severity":1,"message":"79","line":67,"column":18,"nodeType":"59","messageId":"80","endLine":67,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":198,"column":9,"nodeType":"91","messageId":"92","endLine":198,"endColumn":49},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'WHITE' is assigned a value but never used.","'PAWN' is assigned a value but never used.","'KNIGHT' is assigned a value but never used.","'BISHOP' is assigned a value but never used.","'ROOK' is assigned a value but never used.","'KING' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isPossible' is assigned a value but never used.","'isCastling' is assigned a value but never used.","'isEnPassant' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '!==' and instead saw '!='.","no-redeclare","'i' is already defined.","redeclared","'j' is already defined.","'isPossible' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'y', 'x'.","ArrowFunctionExpression","unsafeRefs","'pieceBefore' is assigned a value but never used.","'bestMove' is already defined.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-global-assign","no-unsafe-negation"]